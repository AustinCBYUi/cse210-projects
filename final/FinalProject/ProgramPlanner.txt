Prototype by Austin Campbell
Class Design by Austin Campbell
Utilizies: https://code-maze.com/csharp-string-encryption-decryption/ for password encryption?
Title: ProtoDB CLI
Purpose: Personal use primarily, financial tools like bill pay reminder and paylogger which logs my paychecks.
		Additionally will contain a easy way to create programs plans like this by having a easy to follow layout
		that allows you to make classes and data fields which are written to a file like this one! Lastly, the
		option to take notes that are split every time you press a certain key, which auto-saves it to a notepad file.
Functionality:
		1Menu:
			Handles primary menu stuff behind the scenes like CLI ASCII Logo, Help cmds, and cmds.
		Program creation planning:
		2ProgramPlanner
		+
		3ProgramFields
			Primary frameworks.
			Primary Features
			Type of Application(Web App, Winforms, CLI, Etc..)
			-----
			Planning Classes first, -> Planning DataFields for each class.
			After classes are written, it will back you out to main menu again where you will use the -fields
			command to write fields, a list of your created classes will populate and allow you to specify
			fields for those classes 1 by 1. Once you're all finished with fields, it will ask you to export now or later,
			either way it will export it to the data folder with a formatted program planner similar to this one.
		4Notepad:
			Allows you to write notes with dividers between the exported file. Useful for lectures or video watching.
			Can choose note color, and will contain a list to handle the Note objects.
		5Note:
			Individual class to handle all the individual notes.
		6Billpay reminder:
			Creates a formatted JSON that contains amount due, date due, and which bill / cc it is.
		7Billpay viewer:
			Shows all BPReminders that are set for that month, and displays them in colors. Red is past-due,
			yellow is upcoming, green is paid.
		8Policies:
			Allows you to create new logins to access billpay functionalities as that data SHOULD be encrypted with a userkey.
			Will be encrypted in a json anyway.
		
Main program :

--------------

(1) - Menu - (1)
{
	Attributes/Fields:
		_title : String
		_menuOptions : String
		
	Constructor
		None
	
	Methods:
		ShowSpinner(int countdown) : Void
		Help(string command) : String
}

May change this at some point in how this is handled.
I'm thinking the program planner is the parent, program fields editor is the child.
Your classes go in the parent, the child obviously contains the details of each class.
In program planner you can specify if a class should have a child or not. So like this
Program planner > Child? No.
Program Fields Editor > Child? Yes. ChildOfWhat? Program Planner
Then itll display like Program Planner : Program Feilds Editor.
Each class is selectable after they're created from planner and then inside of fields editor. While inside a class,
it'll run a while loop again until you type "Done" which will break the loop to the next class.
But the loop menu inside the class will display 1. Attributes 2. Constructors 3. Methods.
When creating your attributes, you simply type your attribute names out, then it'll prompt you what type it is.
So if I typed programName > Datatype? > String
it'll format it like _programName : String

Constructors once selected will loop through your created attributes so far maybe? Showing you what you need to possibly
put in them?

Methods once selected will be the same way Attributes are. It'll just prompt you through it. So if I made it
Method Name: DisplayClasses
Parameters: No or None
Returns anything?: No or Void, or the data type it will return.
then it will create it?
DisplayClasses() : Void
(2) - Program Planner - (2)
{
	Attributes/Fields:
		_programName : String
		_createdClass : String
		_isInheritedClass : Boolean
		_inheritedFrom : String
		_programClasses : List<Classes>
		_programFrameWork : String
		_programFeatures : String
		_programAppType : String >> Winform, Web App, etc..

	Constructor:
		None

	Methods:
		DisplayClasses() : Void
		ExportProgram(String fileName) : Void
		ImportProgram() : Void
		CreateNewClass() : Void
		Start() : Void >> Bulk of Logic
}


		ACTUALLY to achieve this design the way we want it to, we might have to split differently for different classes for 
		each type. So Attribute.cs, Constructor.cs, and Method.cs?
(3) - Program Fields Editor : Program Planner - (3)
{
	Attributes/Fields:
		_attributeName : String
		_attributes : List<string>
		_constructorName : String
		_constructors : List<string>
		_methodName : String
		_methods : List<string>

	Constructor:
		None?
	
	Methods:
		DisplayClassFields() : Void
		DisplayClasses() : Void
		DisplayAttributes() : Void
		DisplayConstructors() : Void
		DisplayMethods() : Void
		Start() : Void >> Bulk of Logic
		ExportProgram(String fileName) : Void @OVERRIDE
}


Class that handles all private / sensitive data revolving logging in or accessing certain commands that
should be limited to a policy number (0, 1) and also you are required to login to an account to access a majority
of the commands anyway.
(4) - Policies / Policy - (4)
{
	Attributes/Fields:
		_userName : String
		_password : String
		_policy : Int
		_isLoggedIn : Boolean

	Constructors:
		Policies() / Policy() >> Creates a new user
	
	Methods:
		GetUserName() : String
		GetPolicy() : Int
		GetIsLogged() : Boolean
		DeriveKeyFromPassword(string password) : Byte[]
		Should contain Decrypt and Encrypt also
}


(5) - Notepad - (5)
{
	Attributes/Fields:
		_notes : List<Note>
		_subject : String
	Constructor:
		None
	Methods:
		DisplayNotes() : Void
		ExportNotepad(String fileName) : Void
		ImportNotepad(String fileName) : Void

}


(6) - Note : Notepad - (6)
{
	Attributes/Fields:
		_title : String
		_text : String
		_noteNumber : Int
		_noteColor : String

	Constructor:
		Note(string title, string text, int number) : base(color)

	Methods:
		ChangeColor() : Void
}


(7) - Billpay Reminder - (7)
{
	Attributes/Fields:
		_listOfBills : List<Bill>
	
	Constructor:
		None?
	
	Methods:
		CreateNewBill() : Void
		AddBillToList(Bill billName) : Void
		ExportBillPay() : Void
		ImportBillPay() : Void
 
}


(8) - CreateBillPay - (8)
{
	Attributes/Fields:
		_billName : String
		_dueDate : DateTime
		_amountDue : String

	Constructors:
		CreateBillPay(string name, DateTime date, string amntdue) : base()
		
	Methods:
		None?
}

